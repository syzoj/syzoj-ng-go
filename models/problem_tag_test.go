// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProblemTags(t *testing.T) {
	t.Parallel()

	query := ProblemTags()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProblemTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProblemTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProblemTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProblemTags().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProblemTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProblemTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProblemTagSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProblemTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProblemTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProblemTagExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProblemTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProblemTagExists to return true, but got false.")
	}
}

func testProblemTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	problemTagFound, err := FindProblemTag(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if problemTagFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProblemTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProblemTags().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProblemTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProblemTags().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProblemTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	problemTagOne := &ProblemTag{}
	problemTagTwo := &ProblemTag{}
	if err = randomize.Struct(seed, problemTagOne, problemTagDBTypes, false, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}
	if err = randomize.Struct(seed, problemTagTwo, problemTagDBTypes, false, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = problemTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = problemTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProblemTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProblemTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	problemTagOne := &ProblemTag{}
	problemTagTwo := &ProblemTag{}
	if err = randomize.Struct(seed, problemTagOne, problemTagDBTypes, false, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}
	if err = randomize.Struct(seed, problemTagTwo, problemTagDBTypes, false, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = problemTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = problemTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func problemTagBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func problemTagAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func problemTagAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func problemTagBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func problemTagAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func problemTagBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func problemTagAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func problemTagBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func problemTagAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTag) error {
	*o = ProblemTag{}
	return nil
}

func testProblemTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProblemTag{}
	o := &ProblemTag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, problemTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProblemTag object: %s", err)
	}

	AddProblemTagHook(boil.BeforeInsertHook, problemTagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	problemTagBeforeInsertHooks = []ProblemTagHook{}

	AddProblemTagHook(boil.AfterInsertHook, problemTagAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	problemTagAfterInsertHooks = []ProblemTagHook{}

	AddProblemTagHook(boil.AfterSelectHook, problemTagAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	problemTagAfterSelectHooks = []ProblemTagHook{}

	AddProblemTagHook(boil.BeforeUpdateHook, problemTagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	problemTagBeforeUpdateHooks = []ProblemTagHook{}

	AddProblemTagHook(boil.AfterUpdateHook, problemTagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	problemTagAfterUpdateHooks = []ProblemTagHook{}

	AddProblemTagHook(boil.BeforeDeleteHook, problemTagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	problemTagBeforeDeleteHooks = []ProblemTagHook{}

	AddProblemTagHook(boil.AfterDeleteHook, problemTagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	problemTagAfterDeleteHooks = []ProblemTagHook{}

	AddProblemTagHook(boil.BeforeUpsertHook, problemTagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	problemTagBeforeUpsertHooks = []ProblemTagHook{}

	AddProblemTagHook(boil.AfterUpsertHook, problemTagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	problemTagAfterUpsertHooks = []ProblemTagHook{}
}

func testProblemTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProblemTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(problemTagColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProblemTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProblemTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProblemTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProblemTagSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProblemTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProblemTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	problemTagDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `Color`: `varchar`}
	_                 = bytes.MinRead
)

func testProblemTagsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(problemTagPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(problemTagAllColumns) == len(problemTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProblemTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(problemTagAllColumns) == len(problemTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTag{}
	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, problemTagDBTypes, true, problemTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(problemTagAllColumns, problemTagPrimaryKeyColumns) {
		fields = problemTagAllColumns
	} else {
		fields = strmangle.SetComplement(
			problemTagAllColumns,
			problemTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProblemTagSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProblemTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(problemTagAllColumns) == len(problemTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLProblemTagUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProblemTag{}
	if err = randomize.Struct(seed, &o, problemTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProblemTag: %s", err)
	}

	count, err := ProblemTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, problemTagDBTypes, false, problemTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProblemTag struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProblemTag: %s", err)
	}

	count, err = ProblemTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
