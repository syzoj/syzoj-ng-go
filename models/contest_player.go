// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ContestPlayer is an object representing the database table.
type ContestPlayer struct {
	ID           int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ContestID    null.Int `boil:"contest_id" json:"contest_id,omitempty" toml:"contest_id" yaml:"contest_id,omitempty"`
	UserID       null.Int `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	Score        null.Int `boil:"score" json:"score,omitempty" toml:"score" yaml:"score,omitempty"`
	ScoreDetails string   `boil:"score_details" json:"score_details" toml:"score_details" yaml:"score_details"`
	TimeSpent    null.Int `boil:"time_spent" json:"time_spent,omitempty" toml:"time_spent" yaml:"time_spent,omitempty"`

	R *contestPlayerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contestPlayerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContestPlayerColumns = struct {
	ID           string
	ContestID    string
	UserID       string
	Score        string
	ScoreDetails string
	TimeSpent    string
}{
	ID:           "id",
	ContestID:    "contest_id",
	UserID:       "user_id",
	Score:        "score",
	ScoreDetails: "score_details",
	TimeSpent:    "time_spent",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var ContestPlayerWhere = struct {
	ID           whereHelperint
	ContestID    whereHelpernull_Int
	UserID       whereHelpernull_Int
	Score        whereHelpernull_Int
	ScoreDetails whereHelperstring
	TimeSpent    whereHelpernull_Int
}{
	ID:           whereHelperint{field: "`contest_player`.`id`"},
	ContestID:    whereHelpernull_Int{field: "`contest_player`.`contest_id`"},
	UserID:       whereHelpernull_Int{field: "`contest_player`.`user_id`"},
	Score:        whereHelpernull_Int{field: "`contest_player`.`score`"},
	ScoreDetails: whereHelperstring{field: "`contest_player`.`score_details`"},
	TimeSpent:    whereHelpernull_Int{field: "`contest_player`.`time_spent`"},
}

// ContestPlayerRels is where relationship names are stored.
var ContestPlayerRels = struct {
}{}

// contestPlayerR is where relationships are stored.
type contestPlayerR struct {
}

// NewStruct creates a new relationship struct
func (*contestPlayerR) NewStruct() *contestPlayerR {
	return &contestPlayerR{}
}

// contestPlayerL is where Load methods for each relationship are stored.
type contestPlayerL struct{}

var (
	contestPlayerAllColumns            = []string{"id", "contest_id", "user_id", "score", "score_details", "time_spent"}
	contestPlayerColumnsWithoutDefault = []string{"contest_id", "user_id", "score", "time_spent"}
	contestPlayerColumnsWithDefault    = []string{"id", "score_details"}
	contestPlayerPrimaryKeyColumns     = []string{"id"}
)

type (
	// ContestPlayerSlice is an alias for a slice of pointers to ContestPlayer.
	// This should generally be used opposed to []ContestPlayer.
	ContestPlayerSlice []*ContestPlayer
	// ContestPlayerHook is the signature for custom ContestPlayer hook methods
	ContestPlayerHook func(context.Context, boil.ContextExecutor, *ContestPlayer) error

	contestPlayerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contestPlayerType                 = reflect.TypeOf(&ContestPlayer{})
	contestPlayerMapping              = queries.MakeStructMapping(contestPlayerType)
	contestPlayerPrimaryKeyMapping, _ = queries.BindMapping(contestPlayerType, contestPlayerMapping, contestPlayerPrimaryKeyColumns)
	contestPlayerInsertCacheMut       sync.RWMutex
	contestPlayerInsertCache          = make(map[string]insertCache)
	contestPlayerUpdateCacheMut       sync.RWMutex
	contestPlayerUpdateCache          = make(map[string]updateCache)
	contestPlayerUpsertCacheMut       sync.RWMutex
	contestPlayerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var contestPlayerBeforeInsertHooks []ContestPlayerHook
var contestPlayerBeforeUpdateHooks []ContestPlayerHook
var contestPlayerBeforeDeleteHooks []ContestPlayerHook
var contestPlayerBeforeUpsertHooks []ContestPlayerHook

var contestPlayerAfterInsertHooks []ContestPlayerHook
var contestPlayerAfterSelectHooks []ContestPlayerHook
var contestPlayerAfterUpdateHooks []ContestPlayerHook
var contestPlayerAfterDeleteHooks []ContestPlayerHook
var contestPlayerAfterUpsertHooks []ContestPlayerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ContestPlayer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestPlayerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ContestPlayer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestPlayerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ContestPlayer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestPlayerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ContestPlayer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestPlayerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ContestPlayer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestPlayerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ContestPlayer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestPlayerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ContestPlayer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestPlayerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ContestPlayer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestPlayerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ContestPlayer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestPlayerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddContestPlayerHook registers your hook function for all future operations.
func AddContestPlayerHook(hookPoint boil.HookPoint, contestPlayerHook ContestPlayerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		contestPlayerBeforeInsertHooks = append(contestPlayerBeforeInsertHooks, contestPlayerHook)
	case boil.BeforeUpdateHook:
		contestPlayerBeforeUpdateHooks = append(contestPlayerBeforeUpdateHooks, contestPlayerHook)
	case boil.BeforeDeleteHook:
		contestPlayerBeforeDeleteHooks = append(contestPlayerBeforeDeleteHooks, contestPlayerHook)
	case boil.BeforeUpsertHook:
		contestPlayerBeforeUpsertHooks = append(contestPlayerBeforeUpsertHooks, contestPlayerHook)
	case boil.AfterInsertHook:
		contestPlayerAfterInsertHooks = append(contestPlayerAfterInsertHooks, contestPlayerHook)
	case boil.AfterSelectHook:
		contestPlayerAfterSelectHooks = append(contestPlayerAfterSelectHooks, contestPlayerHook)
	case boil.AfterUpdateHook:
		contestPlayerAfterUpdateHooks = append(contestPlayerAfterUpdateHooks, contestPlayerHook)
	case boil.AfterDeleteHook:
		contestPlayerAfterDeleteHooks = append(contestPlayerAfterDeleteHooks, contestPlayerHook)
	case boil.AfterUpsertHook:
		contestPlayerAfterUpsertHooks = append(contestPlayerAfterUpsertHooks, contestPlayerHook)
	}
}

// One returns a single contestPlayer record from the query.
func (q contestPlayerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ContestPlayer, error) {
	o := &ContestPlayer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for contest_player")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ContestPlayer records from the query.
func (q contestPlayerQuery) All(ctx context.Context, exec boil.ContextExecutor) (ContestPlayerSlice, error) {
	var o []*ContestPlayer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ContestPlayer slice")
	}

	if len(contestPlayerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ContestPlayer records in the query.
func (q contestPlayerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count contest_player rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q contestPlayerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if contest_player exists")
	}

	return count > 0, nil
}

// ContestPlayers retrieves all the records using an executor.
func ContestPlayers(mods ...qm.QueryMod) contestPlayerQuery {
	mods = append(mods, qm.From("`contest_player`"))
	return contestPlayerQuery{NewQuery(mods...)}
}

// FindContestPlayer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContestPlayer(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ContestPlayer, error) {
	contestPlayerObj := &ContestPlayer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `contest_player` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, contestPlayerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from contest_player")
	}

	return contestPlayerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ContestPlayer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no contest_player provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contestPlayerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contestPlayerInsertCacheMut.RLock()
	cache, cached := contestPlayerInsertCache[key]
	contestPlayerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contestPlayerAllColumns,
			contestPlayerColumnsWithDefault,
			contestPlayerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contestPlayerType, contestPlayerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contestPlayerType, contestPlayerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `contest_player` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `contest_player` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `contest_player` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, contestPlayerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into contest_player")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == contestPlayerMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for contest_player")
	}

CacheNoHooks:
	if !cached {
		contestPlayerInsertCacheMut.Lock()
		contestPlayerInsertCache[key] = cache
		contestPlayerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ContestPlayer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ContestPlayer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	contestPlayerUpdateCacheMut.RLock()
	cache, cached := contestPlayerUpdateCache[key]
	contestPlayerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contestPlayerAllColumns,
			contestPlayerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update contest_player, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `contest_player` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, contestPlayerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contestPlayerType, contestPlayerMapping, append(wl, contestPlayerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update contest_player row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for contest_player")
	}

	if !cached {
		contestPlayerUpdateCacheMut.Lock()
		contestPlayerUpdateCache[key] = cache
		contestPlayerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q contestPlayerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for contest_player")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for contest_player")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContestPlayerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contestPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `contest_player` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contestPlayerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in contestPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all contestPlayer")
	}
	return rowsAff, nil
}

var mySQLContestPlayerUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ContestPlayer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no contest_player provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contestPlayerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLContestPlayerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contestPlayerUpsertCacheMut.RLock()
	cache, cached := contestPlayerUpsertCache[key]
	contestPlayerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			contestPlayerAllColumns,
			contestPlayerColumnsWithDefault,
			contestPlayerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			contestPlayerAllColumns,
			contestPlayerPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert contest_player, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "contest_player", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `contest_player` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(contestPlayerType, contestPlayerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contestPlayerType, contestPlayerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for contest_player")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == contestPlayerMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(contestPlayerType, contestPlayerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for contest_player")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for contest_player")
	}

CacheNoHooks:
	if !cached {
		contestPlayerUpsertCacheMut.Lock()
		contestPlayerUpsertCache[key] = cache
		contestPlayerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ContestPlayer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ContestPlayer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ContestPlayer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contestPlayerPrimaryKeyMapping)
	sql := "DELETE FROM `contest_player` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from contest_player")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for contest_player")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q contestPlayerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no contestPlayerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from contest_player")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for contest_player")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContestPlayerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(contestPlayerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contestPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `contest_player` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contestPlayerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from contestPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for contest_player")
	}

	if len(contestPlayerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ContestPlayer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindContestPlayer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContestPlayerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContestPlayerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contestPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `contest_player`.* FROM `contest_player` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contestPlayerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ContestPlayerSlice")
	}

	*o = slice

	return nil
}

// ContestPlayerExists checks if the ContestPlayer row exists.
func ContestPlayerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `contest_player` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if contest_player exists")
	}

	return exists, nil
}
