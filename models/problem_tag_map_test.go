// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProblemTagMaps(t *testing.T) {
	t.Parallel()

	query := ProblemTagMaps()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProblemTagMapsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTagMap{}
	if err = randomize.Struct(seed, o, problemTagMapDBTypes, true, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProblemTagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProblemTagMapsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTagMap{}
	if err = randomize.Struct(seed, o, problemTagMapDBTypes, true, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProblemTagMaps().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProblemTagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProblemTagMapsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTagMap{}
	if err = randomize.Struct(seed, o, problemTagMapDBTypes, true, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProblemTagMapSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProblemTagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProblemTagMapsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTagMap{}
	if err = randomize.Struct(seed, o, problemTagMapDBTypes, true, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProblemTagMapExists(ctx, tx, o.ProblemID, o.TagID)
	if err != nil {
		t.Errorf("Unable to check if ProblemTagMap exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProblemTagMapExists to return true, but got false.")
	}
}

func testProblemTagMapsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTagMap{}
	if err = randomize.Struct(seed, o, problemTagMapDBTypes, true, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	problemTagMapFound, err := FindProblemTagMap(ctx, tx, o.ProblemID, o.TagID)
	if err != nil {
		t.Error(err)
	}

	if problemTagMapFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProblemTagMapsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTagMap{}
	if err = randomize.Struct(seed, o, problemTagMapDBTypes, true, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProblemTagMaps().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProblemTagMapsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTagMap{}
	if err = randomize.Struct(seed, o, problemTagMapDBTypes, true, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProblemTagMaps().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProblemTagMapsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	problemTagMapOne := &ProblemTagMap{}
	problemTagMapTwo := &ProblemTagMap{}
	if err = randomize.Struct(seed, problemTagMapOne, problemTagMapDBTypes, false, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}
	if err = randomize.Struct(seed, problemTagMapTwo, problemTagMapDBTypes, false, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = problemTagMapOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = problemTagMapTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProblemTagMaps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProblemTagMapsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	problemTagMapOne := &ProblemTagMap{}
	problemTagMapTwo := &ProblemTagMap{}
	if err = randomize.Struct(seed, problemTagMapOne, problemTagMapDBTypes, false, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}
	if err = randomize.Struct(seed, problemTagMapTwo, problemTagMapDBTypes, false, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = problemTagMapOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = problemTagMapTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemTagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func problemTagMapBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTagMap) error {
	*o = ProblemTagMap{}
	return nil
}

func problemTagMapAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTagMap) error {
	*o = ProblemTagMap{}
	return nil
}

func problemTagMapAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTagMap) error {
	*o = ProblemTagMap{}
	return nil
}

func problemTagMapBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTagMap) error {
	*o = ProblemTagMap{}
	return nil
}

func problemTagMapAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTagMap) error {
	*o = ProblemTagMap{}
	return nil
}

func problemTagMapBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTagMap) error {
	*o = ProblemTagMap{}
	return nil
}

func problemTagMapAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTagMap) error {
	*o = ProblemTagMap{}
	return nil
}

func problemTagMapBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTagMap) error {
	*o = ProblemTagMap{}
	return nil
}

func problemTagMapAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProblemTagMap) error {
	*o = ProblemTagMap{}
	return nil
}

func testProblemTagMapsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProblemTagMap{}
	o := &ProblemTagMap{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, problemTagMapDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap object: %s", err)
	}

	AddProblemTagMapHook(boil.BeforeInsertHook, problemTagMapBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	problemTagMapBeforeInsertHooks = []ProblemTagMapHook{}

	AddProblemTagMapHook(boil.AfterInsertHook, problemTagMapAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	problemTagMapAfterInsertHooks = []ProblemTagMapHook{}

	AddProblemTagMapHook(boil.AfterSelectHook, problemTagMapAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	problemTagMapAfterSelectHooks = []ProblemTagMapHook{}

	AddProblemTagMapHook(boil.BeforeUpdateHook, problemTagMapBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	problemTagMapBeforeUpdateHooks = []ProblemTagMapHook{}

	AddProblemTagMapHook(boil.AfterUpdateHook, problemTagMapAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	problemTagMapAfterUpdateHooks = []ProblemTagMapHook{}

	AddProblemTagMapHook(boil.BeforeDeleteHook, problemTagMapBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	problemTagMapBeforeDeleteHooks = []ProblemTagMapHook{}

	AddProblemTagMapHook(boil.AfterDeleteHook, problemTagMapAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	problemTagMapAfterDeleteHooks = []ProblemTagMapHook{}

	AddProblemTagMapHook(boil.BeforeUpsertHook, problemTagMapBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	problemTagMapBeforeUpsertHooks = []ProblemTagMapHook{}

	AddProblemTagMapHook(boil.AfterUpsertHook, problemTagMapAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	problemTagMapAfterUpsertHooks = []ProblemTagMapHook{}
}

func testProblemTagMapsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTagMap{}
	if err = randomize.Struct(seed, o, problemTagMapDBTypes, true, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemTagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProblemTagMapsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTagMap{}
	if err = randomize.Struct(seed, o, problemTagMapDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(problemTagMapColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProblemTagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProblemTagMapsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTagMap{}
	if err = randomize.Struct(seed, o, problemTagMapDBTypes, true, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProblemTagMapsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTagMap{}
	if err = randomize.Struct(seed, o, problemTagMapDBTypes, true, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProblemTagMapSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProblemTagMapsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTagMap{}
	if err = randomize.Struct(seed, o, problemTagMapDBTypes, true, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProblemTagMaps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	problemTagMapDBTypes = map[string]string{`ProblemID`: `int`, `TagID`: `int`}
	_                    = bytes.MinRead
)

func testProblemTagMapsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(problemTagMapPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(problemTagMapAllColumns) == len(problemTagMapPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTagMap{}
	if err = randomize.Struct(seed, o, problemTagMapDBTypes, true, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemTagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, problemTagMapDBTypes, true, problemTagMapPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProblemTagMapsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(problemTagMapAllColumns) == len(problemTagMapPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProblemTagMap{}
	if err = randomize.Struct(seed, o, problemTagMapDBTypes, true, problemTagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProblemTagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, problemTagMapDBTypes, true, problemTagMapPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(problemTagMapAllColumns, problemTagMapPrimaryKeyColumns) {
		fields = problemTagMapAllColumns
	} else {
		fields = strmangle.SetComplement(
			problemTagMapAllColumns,
			problemTagMapPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProblemTagMapSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProblemTagMapsUpsert(t *testing.T) {
	t.Parallel()

	if len(problemTagMapAllColumns) == len(problemTagMapPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLProblemTagMapUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProblemTagMap{}
	if err = randomize.Struct(seed, &o, problemTagMapDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProblemTagMap: %s", err)
	}

	count, err := ProblemTagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, problemTagMapDBTypes, false, problemTagMapPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProblemTagMap struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProblemTagMap: %s", err)
	}

	count, err = ProblemTagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
