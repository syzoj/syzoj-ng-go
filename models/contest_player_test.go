// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testContestPlayers(t *testing.T) {
	t.Parallel()

	query := ContestPlayers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testContestPlayersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContestPlayer{}
	if err = randomize.Struct(seed, o, contestPlayerDBTypes, true, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ContestPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContestPlayersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContestPlayer{}
	if err = randomize.Struct(seed, o, contestPlayerDBTypes, true, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ContestPlayers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ContestPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContestPlayersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContestPlayer{}
	if err = randomize.Struct(seed, o, contestPlayerDBTypes, true, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ContestPlayerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ContestPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContestPlayersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContestPlayer{}
	if err = randomize.Struct(seed, o, contestPlayerDBTypes, true, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ContestPlayerExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ContestPlayer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ContestPlayerExists to return true, but got false.")
	}
}

func testContestPlayersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContestPlayer{}
	if err = randomize.Struct(seed, o, contestPlayerDBTypes, true, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	contestPlayerFound, err := FindContestPlayer(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if contestPlayerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testContestPlayersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContestPlayer{}
	if err = randomize.Struct(seed, o, contestPlayerDBTypes, true, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ContestPlayers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testContestPlayersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContestPlayer{}
	if err = randomize.Struct(seed, o, contestPlayerDBTypes, true, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ContestPlayers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testContestPlayersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contestPlayerOne := &ContestPlayer{}
	contestPlayerTwo := &ContestPlayer{}
	if err = randomize.Struct(seed, contestPlayerOne, contestPlayerDBTypes, false, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, contestPlayerTwo, contestPlayerDBTypes, false, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = contestPlayerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = contestPlayerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ContestPlayers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testContestPlayersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	contestPlayerOne := &ContestPlayer{}
	contestPlayerTwo := &ContestPlayer{}
	if err = randomize.Struct(seed, contestPlayerOne, contestPlayerDBTypes, false, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, contestPlayerTwo, contestPlayerDBTypes, false, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = contestPlayerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = contestPlayerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContestPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func contestPlayerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ContestPlayer) error {
	*o = ContestPlayer{}
	return nil
}

func contestPlayerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ContestPlayer) error {
	*o = ContestPlayer{}
	return nil
}

func contestPlayerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ContestPlayer) error {
	*o = ContestPlayer{}
	return nil
}

func contestPlayerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ContestPlayer) error {
	*o = ContestPlayer{}
	return nil
}

func contestPlayerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ContestPlayer) error {
	*o = ContestPlayer{}
	return nil
}

func contestPlayerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ContestPlayer) error {
	*o = ContestPlayer{}
	return nil
}

func contestPlayerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ContestPlayer) error {
	*o = ContestPlayer{}
	return nil
}

func contestPlayerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ContestPlayer) error {
	*o = ContestPlayer{}
	return nil
}

func contestPlayerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ContestPlayer) error {
	*o = ContestPlayer{}
	return nil
}

func testContestPlayersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ContestPlayer{}
	o := &ContestPlayer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, contestPlayerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ContestPlayer object: %s", err)
	}

	AddContestPlayerHook(boil.BeforeInsertHook, contestPlayerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	contestPlayerBeforeInsertHooks = []ContestPlayerHook{}

	AddContestPlayerHook(boil.AfterInsertHook, contestPlayerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	contestPlayerAfterInsertHooks = []ContestPlayerHook{}

	AddContestPlayerHook(boil.AfterSelectHook, contestPlayerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	contestPlayerAfterSelectHooks = []ContestPlayerHook{}

	AddContestPlayerHook(boil.BeforeUpdateHook, contestPlayerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	contestPlayerBeforeUpdateHooks = []ContestPlayerHook{}

	AddContestPlayerHook(boil.AfterUpdateHook, contestPlayerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	contestPlayerAfterUpdateHooks = []ContestPlayerHook{}

	AddContestPlayerHook(boil.BeforeDeleteHook, contestPlayerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	contestPlayerBeforeDeleteHooks = []ContestPlayerHook{}

	AddContestPlayerHook(boil.AfterDeleteHook, contestPlayerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	contestPlayerAfterDeleteHooks = []ContestPlayerHook{}

	AddContestPlayerHook(boil.BeforeUpsertHook, contestPlayerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	contestPlayerBeforeUpsertHooks = []ContestPlayerHook{}

	AddContestPlayerHook(boil.AfterUpsertHook, contestPlayerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	contestPlayerAfterUpsertHooks = []ContestPlayerHook{}
}

func testContestPlayersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContestPlayer{}
	if err = randomize.Struct(seed, o, contestPlayerDBTypes, true, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContestPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContestPlayersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContestPlayer{}
	if err = randomize.Struct(seed, o, contestPlayerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(contestPlayerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ContestPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContestPlayersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContestPlayer{}
	if err = randomize.Struct(seed, o, contestPlayerDBTypes, true, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testContestPlayersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContestPlayer{}
	if err = randomize.Struct(seed, o, contestPlayerDBTypes, true, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ContestPlayerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testContestPlayersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContestPlayer{}
	if err = randomize.Struct(seed, o, contestPlayerDBTypes, true, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ContestPlayers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	contestPlayerDBTypes = map[string]string{`ID`: `int`, `ContestID`: `int`, `UserID`: `int`, `Score`: `int`, `ScoreDetails`: `longtext`, `TimeSpent`: `int`}
	_                    = bytes.MinRead
)

func testContestPlayersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(contestPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(contestPlayerAllColumns) == len(contestPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ContestPlayer{}
	if err = randomize.Struct(seed, o, contestPlayerDBTypes, true, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContestPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, contestPlayerDBTypes, true, contestPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testContestPlayersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(contestPlayerAllColumns) == len(contestPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ContestPlayer{}
	if err = randomize.Struct(seed, o, contestPlayerDBTypes, true, contestPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContestPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, contestPlayerDBTypes, true, contestPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(contestPlayerAllColumns, contestPlayerPrimaryKeyColumns) {
		fields = contestPlayerAllColumns
	} else {
		fields = strmangle.SetComplement(
			contestPlayerAllColumns,
			contestPlayerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ContestPlayerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testContestPlayersUpsert(t *testing.T) {
	t.Parallel()

	if len(contestPlayerAllColumns) == len(contestPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLContestPlayerUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ContestPlayer{}
	if err = randomize.Struct(seed, &o, contestPlayerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ContestPlayer: %s", err)
	}

	count, err := ContestPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, contestPlayerDBTypes, false, contestPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContestPlayer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ContestPlayer: %s", err)
	}

	count, err = ContestPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
