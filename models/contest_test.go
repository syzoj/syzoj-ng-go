// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testContests(t *testing.T) {
	t.Parallel()

	query := Contests()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testContestsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contest{}
	if err = randomize.Struct(seed, o, contestDBTypes, true, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Contests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContestsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contest{}
	if err = randomize.Struct(seed, o, contestDBTypes, true, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Contests().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Contests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContestsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contest{}
	if err = randomize.Struct(seed, o, contestDBTypes, true, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ContestSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Contests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContestsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contest{}
	if err = randomize.Struct(seed, o, contestDBTypes, true, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ContestExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Contest exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ContestExists to return true, but got false.")
	}
}

func testContestsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contest{}
	if err = randomize.Struct(seed, o, contestDBTypes, true, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	contestFound, err := FindContest(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if contestFound == nil {
		t.Error("want a record, got nil")
	}
}

func testContestsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contest{}
	if err = randomize.Struct(seed, o, contestDBTypes, true, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Contests().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testContestsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contest{}
	if err = randomize.Struct(seed, o, contestDBTypes, true, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Contests().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testContestsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contestOne := &Contest{}
	contestTwo := &Contest{}
	if err = randomize.Struct(seed, contestOne, contestDBTypes, false, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}
	if err = randomize.Struct(seed, contestTwo, contestDBTypes, false, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = contestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = contestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Contests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testContestsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	contestOne := &Contest{}
	contestTwo := &Contest{}
	if err = randomize.Struct(seed, contestOne, contestDBTypes, false, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}
	if err = randomize.Struct(seed, contestTwo, contestDBTypes, false, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = contestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = contestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Contests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func contestBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Contest) error {
	*o = Contest{}
	return nil
}

func contestAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Contest) error {
	*o = Contest{}
	return nil
}

func contestAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Contest) error {
	*o = Contest{}
	return nil
}

func contestBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Contest) error {
	*o = Contest{}
	return nil
}

func contestAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Contest) error {
	*o = Contest{}
	return nil
}

func contestBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Contest) error {
	*o = Contest{}
	return nil
}

func contestAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Contest) error {
	*o = Contest{}
	return nil
}

func contestBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Contest) error {
	*o = Contest{}
	return nil
}

func contestAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Contest) error {
	*o = Contest{}
	return nil
}

func testContestsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Contest{}
	o := &Contest{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, contestDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Contest object: %s", err)
	}

	AddContestHook(boil.BeforeInsertHook, contestBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	contestBeforeInsertHooks = []ContestHook{}

	AddContestHook(boil.AfterInsertHook, contestAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	contestAfterInsertHooks = []ContestHook{}

	AddContestHook(boil.AfterSelectHook, contestAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	contestAfterSelectHooks = []ContestHook{}

	AddContestHook(boil.BeforeUpdateHook, contestBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	contestBeforeUpdateHooks = []ContestHook{}

	AddContestHook(boil.AfterUpdateHook, contestAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	contestAfterUpdateHooks = []ContestHook{}

	AddContestHook(boil.BeforeDeleteHook, contestBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	contestBeforeDeleteHooks = []ContestHook{}

	AddContestHook(boil.AfterDeleteHook, contestAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	contestAfterDeleteHooks = []ContestHook{}

	AddContestHook(boil.BeforeUpsertHook, contestBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	contestBeforeUpsertHooks = []ContestHook{}

	AddContestHook(boil.AfterUpsertHook, contestAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	contestAfterUpsertHooks = []ContestHook{}
}

func testContestsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contest{}
	if err = randomize.Struct(seed, o, contestDBTypes, true, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Contests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContestsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contest{}
	if err = randomize.Struct(seed, o, contestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(contestColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Contests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContestsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contest{}
	if err = randomize.Struct(seed, o, contestDBTypes, true, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testContestsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contest{}
	if err = randomize.Struct(seed, o, contestDBTypes, true, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ContestSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testContestsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Contest{}
	if err = randomize.Struct(seed, o, contestDBTypes, true, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Contests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	contestDBTypes = map[string]string{`ID`: `int`, `Title`: `varchar`, `Subtitle`: `text`, `StartTime`: `int`, `EndTime`: `int`, `HolderID`: `int`, `Type`: `enum('noi','ioi','acm')`, `Information`: `text`, `Problems`: `text`, `Admins`: `text`, `RanklistID`: `int`, `IsPublic`: `tinyint`, `HideStatistics`: `tinyint`}
	_              = bytes.MinRead
)

func testContestsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(contestPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(contestAllColumns) == len(contestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Contest{}
	if err = randomize.Struct(seed, o, contestDBTypes, true, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Contests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, contestDBTypes, true, contestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testContestsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(contestAllColumns) == len(contestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Contest{}
	if err = randomize.Struct(seed, o, contestDBTypes, true, contestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Contests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, contestDBTypes, true, contestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(contestAllColumns, contestPrimaryKeyColumns) {
		fields = contestAllColumns
	} else {
		fields = strmangle.SetComplement(
			contestAllColumns,
			contestPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ContestSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testContestsUpsert(t *testing.T) {
	t.Parallel()

	if len(contestAllColumns) == len(contestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLContestUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Contest{}
	if err = randomize.Struct(seed, &o, contestDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Contest: %s", err)
	}

	count, err := Contests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, contestDBTypes, false, contestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Contest struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Contest: %s", err)
	}

	count, err = Contests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
