// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSubmissionStatistics(t *testing.T) {
	t.Parallel()

	query := SubmissionStatistics()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSubmissionStatisticsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubmissionStatistic{}
	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, true, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SubmissionStatistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSubmissionStatisticsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubmissionStatistic{}
	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, true, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SubmissionStatistics().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SubmissionStatistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSubmissionStatisticsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubmissionStatistic{}
	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, true, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SubmissionStatisticSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SubmissionStatistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSubmissionStatisticsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubmissionStatistic{}
	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, true, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SubmissionStatisticExists(ctx, tx, o.ProblemID, o.UserID, o.Type)
	if err != nil {
		t.Errorf("Unable to check if SubmissionStatistic exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SubmissionStatisticExists to return true, but got false.")
	}
}

func testSubmissionStatisticsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubmissionStatistic{}
	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, true, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	submissionStatisticFound, err := FindSubmissionStatistic(ctx, tx, o.ProblemID, o.UserID, o.Type)
	if err != nil {
		t.Error(err)
	}

	if submissionStatisticFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSubmissionStatisticsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubmissionStatistic{}
	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, true, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SubmissionStatistics().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSubmissionStatisticsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubmissionStatistic{}
	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, true, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SubmissionStatistics().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSubmissionStatisticsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	submissionStatisticOne := &SubmissionStatistic{}
	submissionStatisticTwo := &SubmissionStatistic{}
	if err = randomize.Struct(seed, submissionStatisticOne, submissionStatisticDBTypes, false, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}
	if err = randomize.Struct(seed, submissionStatisticTwo, submissionStatisticDBTypes, false, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = submissionStatisticOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = submissionStatisticTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SubmissionStatistics().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSubmissionStatisticsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	submissionStatisticOne := &SubmissionStatistic{}
	submissionStatisticTwo := &SubmissionStatistic{}
	if err = randomize.Struct(seed, submissionStatisticOne, submissionStatisticDBTypes, false, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}
	if err = randomize.Struct(seed, submissionStatisticTwo, submissionStatisticDBTypes, false, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = submissionStatisticOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = submissionStatisticTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SubmissionStatistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func submissionStatisticBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SubmissionStatistic) error {
	*o = SubmissionStatistic{}
	return nil
}

func submissionStatisticAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SubmissionStatistic) error {
	*o = SubmissionStatistic{}
	return nil
}

func submissionStatisticAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SubmissionStatistic) error {
	*o = SubmissionStatistic{}
	return nil
}

func submissionStatisticBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SubmissionStatistic) error {
	*o = SubmissionStatistic{}
	return nil
}

func submissionStatisticAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SubmissionStatistic) error {
	*o = SubmissionStatistic{}
	return nil
}

func submissionStatisticBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SubmissionStatistic) error {
	*o = SubmissionStatistic{}
	return nil
}

func submissionStatisticAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SubmissionStatistic) error {
	*o = SubmissionStatistic{}
	return nil
}

func submissionStatisticBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SubmissionStatistic) error {
	*o = SubmissionStatistic{}
	return nil
}

func submissionStatisticAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SubmissionStatistic) error {
	*o = SubmissionStatistic{}
	return nil
}

func testSubmissionStatisticsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SubmissionStatistic{}
	o := &SubmissionStatistic{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic object: %s", err)
	}

	AddSubmissionStatisticHook(boil.BeforeInsertHook, submissionStatisticBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	submissionStatisticBeforeInsertHooks = []SubmissionStatisticHook{}

	AddSubmissionStatisticHook(boil.AfterInsertHook, submissionStatisticAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	submissionStatisticAfterInsertHooks = []SubmissionStatisticHook{}

	AddSubmissionStatisticHook(boil.AfterSelectHook, submissionStatisticAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	submissionStatisticAfterSelectHooks = []SubmissionStatisticHook{}

	AddSubmissionStatisticHook(boil.BeforeUpdateHook, submissionStatisticBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	submissionStatisticBeforeUpdateHooks = []SubmissionStatisticHook{}

	AddSubmissionStatisticHook(boil.AfterUpdateHook, submissionStatisticAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	submissionStatisticAfterUpdateHooks = []SubmissionStatisticHook{}

	AddSubmissionStatisticHook(boil.BeforeDeleteHook, submissionStatisticBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	submissionStatisticBeforeDeleteHooks = []SubmissionStatisticHook{}

	AddSubmissionStatisticHook(boil.AfterDeleteHook, submissionStatisticAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	submissionStatisticAfterDeleteHooks = []SubmissionStatisticHook{}

	AddSubmissionStatisticHook(boil.BeforeUpsertHook, submissionStatisticBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	submissionStatisticBeforeUpsertHooks = []SubmissionStatisticHook{}

	AddSubmissionStatisticHook(boil.AfterUpsertHook, submissionStatisticAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	submissionStatisticAfterUpsertHooks = []SubmissionStatisticHook{}
}

func testSubmissionStatisticsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubmissionStatistic{}
	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, true, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SubmissionStatistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSubmissionStatisticsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubmissionStatistic{}
	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(submissionStatisticColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SubmissionStatistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSubmissionStatisticsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubmissionStatistic{}
	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, true, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSubmissionStatisticsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubmissionStatistic{}
	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, true, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SubmissionStatisticSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSubmissionStatisticsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubmissionStatistic{}
	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, true, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SubmissionStatistics().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	submissionStatisticDBTypes = map[string]string{`ProblemID`: `int`, `UserID`: `int`, `Type`: `enum('fastest','slowest','shortest','longest','min','max','earliest')`, `Key`: `int`, `SubmissionID`: `int`}
	_                          = bytes.MinRead
)

func testSubmissionStatisticsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(submissionStatisticPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(submissionStatisticAllColumns) == len(submissionStatisticPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SubmissionStatistic{}
	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, true, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SubmissionStatistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, true, submissionStatisticPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSubmissionStatisticsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(submissionStatisticAllColumns) == len(submissionStatisticPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SubmissionStatistic{}
	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, true, submissionStatisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SubmissionStatistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, submissionStatisticDBTypes, true, submissionStatisticPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(submissionStatisticAllColumns, submissionStatisticPrimaryKeyColumns) {
		fields = submissionStatisticAllColumns
	} else {
		fields = strmangle.SetComplement(
			submissionStatisticAllColumns,
			submissionStatisticPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SubmissionStatisticSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSubmissionStatisticsUpsert(t *testing.T) {
	t.Parallel()

	if len(submissionStatisticAllColumns) == len(submissionStatisticPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLSubmissionStatisticUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SubmissionStatistic{}
	if err = randomize.Struct(seed, &o, submissionStatisticDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SubmissionStatistic: %s", err)
	}

	count, err := SubmissionStatistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, submissionStatisticDBTypes, false, submissionStatisticPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SubmissionStatistic struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SubmissionStatistic: %s", err)
	}

	count, err = SubmissionStatistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
