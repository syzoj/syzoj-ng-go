// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testArticleComments(t *testing.T) {
	t.Parallel()

	query := ArticleComments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testArticleCommentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArticleComment{}
	if err = randomize.Struct(seed, o, articleCommentDBTypes, true, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ArticleComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArticleCommentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArticleComment{}
	if err = randomize.Struct(seed, o, articleCommentDBTypes, true, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ArticleComments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ArticleComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArticleCommentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArticleComment{}
	if err = randomize.Struct(seed, o, articleCommentDBTypes, true, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ArticleCommentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ArticleComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArticleCommentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArticleComment{}
	if err = randomize.Struct(seed, o, articleCommentDBTypes, true, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ArticleCommentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ArticleComment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ArticleCommentExists to return true, but got false.")
	}
}

func testArticleCommentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArticleComment{}
	if err = randomize.Struct(seed, o, articleCommentDBTypes, true, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	articleCommentFound, err := FindArticleComment(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if articleCommentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testArticleCommentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArticleComment{}
	if err = randomize.Struct(seed, o, articleCommentDBTypes, true, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ArticleComments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testArticleCommentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArticleComment{}
	if err = randomize.Struct(seed, o, articleCommentDBTypes, true, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ArticleComments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testArticleCommentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	articleCommentOne := &ArticleComment{}
	articleCommentTwo := &ArticleComment{}
	if err = randomize.Struct(seed, articleCommentOne, articleCommentDBTypes, false, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}
	if err = randomize.Struct(seed, articleCommentTwo, articleCommentDBTypes, false, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = articleCommentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = articleCommentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ArticleComments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testArticleCommentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	articleCommentOne := &ArticleComment{}
	articleCommentTwo := &ArticleComment{}
	if err = randomize.Struct(seed, articleCommentOne, articleCommentDBTypes, false, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}
	if err = randomize.Struct(seed, articleCommentTwo, articleCommentDBTypes, false, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = articleCommentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = articleCommentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ArticleComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func articleCommentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ArticleComment) error {
	*o = ArticleComment{}
	return nil
}

func articleCommentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ArticleComment) error {
	*o = ArticleComment{}
	return nil
}

func articleCommentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ArticleComment) error {
	*o = ArticleComment{}
	return nil
}

func articleCommentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ArticleComment) error {
	*o = ArticleComment{}
	return nil
}

func articleCommentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ArticleComment) error {
	*o = ArticleComment{}
	return nil
}

func articleCommentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ArticleComment) error {
	*o = ArticleComment{}
	return nil
}

func articleCommentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ArticleComment) error {
	*o = ArticleComment{}
	return nil
}

func articleCommentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ArticleComment) error {
	*o = ArticleComment{}
	return nil
}

func articleCommentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ArticleComment) error {
	*o = ArticleComment{}
	return nil
}

func testArticleCommentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ArticleComment{}
	o := &ArticleComment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, articleCommentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ArticleComment object: %s", err)
	}

	AddArticleCommentHook(boil.BeforeInsertHook, articleCommentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	articleCommentBeforeInsertHooks = []ArticleCommentHook{}

	AddArticleCommentHook(boil.AfterInsertHook, articleCommentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	articleCommentAfterInsertHooks = []ArticleCommentHook{}

	AddArticleCommentHook(boil.AfterSelectHook, articleCommentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	articleCommentAfterSelectHooks = []ArticleCommentHook{}

	AddArticleCommentHook(boil.BeforeUpdateHook, articleCommentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	articleCommentBeforeUpdateHooks = []ArticleCommentHook{}

	AddArticleCommentHook(boil.AfterUpdateHook, articleCommentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	articleCommentAfterUpdateHooks = []ArticleCommentHook{}

	AddArticleCommentHook(boil.BeforeDeleteHook, articleCommentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	articleCommentBeforeDeleteHooks = []ArticleCommentHook{}

	AddArticleCommentHook(boil.AfterDeleteHook, articleCommentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	articleCommentAfterDeleteHooks = []ArticleCommentHook{}

	AddArticleCommentHook(boil.BeforeUpsertHook, articleCommentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	articleCommentBeforeUpsertHooks = []ArticleCommentHook{}

	AddArticleCommentHook(boil.AfterUpsertHook, articleCommentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	articleCommentAfterUpsertHooks = []ArticleCommentHook{}
}

func testArticleCommentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArticleComment{}
	if err = randomize.Struct(seed, o, articleCommentDBTypes, true, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ArticleComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testArticleCommentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArticleComment{}
	if err = randomize.Struct(seed, o, articleCommentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(articleCommentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ArticleComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testArticleCommentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArticleComment{}
	if err = randomize.Struct(seed, o, articleCommentDBTypes, true, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testArticleCommentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArticleComment{}
	if err = randomize.Struct(seed, o, articleCommentDBTypes, true, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ArticleCommentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testArticleCommentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArticleComment{}
	if err = randomize.Struct(seed, o, articleCommentDBTypes, true, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ArticleComments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	articleCommentDBTypes = map[string]string{`ID`: `int`, `Content`: `text`, `ArticleID`: `int`, `UserID`: `int`, `PublicTime`: `int`}
	_                     = bytes.MinRead
)

func testArticleCommentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(articleCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(articleCommentAllColumns) == len(articleCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ArticleComment{}
	if err = randomize.Struct(seed, o, articleCommentDBTypes, true, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ArticleComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, articleCommentDBTypes, true, articleCommentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testArticleCommentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(articleCommentAllColumns) == len(articleCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ArticleComment{}
	if err = randomize.Struct(seed, o, articleCommentDBTypes, true, articleCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ArticleComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, articleCommentDBTypes, true, articleCommentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(articleCommentAllColumns, articleCommentPrimaryKeyColumns) {
		fields = articleCommentAllColumns
	} else {
		fields = strmangle.SetComplement(
			articleCommentAllColumns,
			articleCommentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ArticleCommentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testArticleCommentsUpsert(t *testing.T) {
	t.Parallel()

	if len(articleCommentAllColumns) == len(articleCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLArticleCommentUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ArticleComment{}
	if err = randomize.Struct(seed, &o, articleCommentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ArticleComment: %s", err)
	}

	count, err := ArticleComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, articleCommentDBTypes, false, articleCommentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ArticleComment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ArticleComment: %s", err)
	}

	count, err = ArticleComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
