// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFormattedCodes(t *testing.T) {
	t.Parallel()

	query := FormattedCodes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFormattedCodesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FormattedCode{}
	if err = randomize.Struct(seed, o, formattedCodeDBTypes, true, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FormattedCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFormattedCodesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FormattedCode{}
	if err = randomize.Struct(seed, o, formattedCodeDBTypes, true, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FormattedCodes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FormattedCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFormattedCodesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FormattedCode{}
	if err = randomize.Struct(seed, o, formattedCodeDBTypes, true, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FormattedCodeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FormattedCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFormattedCodesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FormattedCode{}
	if err = randomize.Struct(seed, o, formattedCodeDBTypes, true, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FormattedCodeExists(ctx, tx, o.Key)
	if err != nil {
		t.Errorf("Unable to check if FormattedCode exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FormattedCodeExists to return true, but got false.")
	}
}

func testFormattedCodesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FormattedCode{}
	if err = randomize.Struct(seed, o, formattedCodeDBTypes, true, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	formattedCodeFound, err := FindFormattedCode(ctx, tx, o.Key)
	if err != nil {
		t.Error(err)
	}

	if formattedCodeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFormattedCodesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FormattedCode{}
	if err = randomize.Struct(seed, o, formattedCodeDBTypes, true, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FormattedCodes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFormattedCodesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FormattedCode{}
	if err = randomize.Struct(seed, o, formattedCodeDBTypes, true, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FormattedCodes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFormattedCodesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	formattedCodeOne := &FormattedCode{}
	formattedCodeTwo := &FormattedCode{}
	if err = randomize.Struct(seed, formattedCodeOne, formattedCodeDBTypes, false, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}
	if err = randomize.Struct(seed, formattedCodeTwo, formattedCodeDBTypes, false, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = formattedCodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = formattedCodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FormattedCodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFormattedCodesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	formattedCodeOne := &FormattedCode{}
	formattedCodeTwo := &FormattedCode{}
	if err = randomize.Struct(seed, formattedCodeOne, formattedCodeDBTypes, false, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}
	if err = randomize.Struct(seed, formattedCodeTwo, formattedCodeDBTypes, false, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = formattedCodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = formattedCodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FormattedCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func formattedCodeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FormattedCode) error {
	*o = FormattedCode{}
	return nil
}

func formattedCodeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FormattedCode) error {
	*o = FormattedCode{}
	return nil
}

func formattedCodeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FormattedCode) error {
	*o = FormattedCode{}
	return nil
}

func formattedCodeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FormattedCode) error {
	*o = FormattedCode{}
	return nil
}

func formattedCodeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FormattedCode) error {
	*o = FormattedCode{}
	return nil
}

func formattedCodeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FormattedCode) error {
	*o = FormattedCode{}
	return nil
}

func formattedCodeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FormattedCode) error {
	*o = FormattedCode{}
	return nil
}

func formattedCodeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FormattedCode) error {
	*o = FormattedCode{}
	return nil
}

func formattedCodeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FormattedCode) error {
	*o = FormattedCode{}
	return nil
}

func testFormattedCodesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FormattedCode{}
	o := &FormattedCode{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, formattedCodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FormattedCode object: %s", err)
	}

	AddFormattedCodeHook(boil.BeforeInsertHook, formattedCodeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	formattedCodeBeforeInsertHooks = []FormattedCodeHook{}

	AddFormattedCodeHook(boil.AfterInsertHook, formattedCodeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	formattedCodeAfterInsertHooks = []FormattedCodeHook{}

	AddFormattedCodeHook(boil.AfterSelectHook, formattedCodeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	formattedCodeAfterSelectHooks = []FormattedCodeHook{}

	AddFormattedCodeHook(boil.BeforeUpdateHook, formattedCodeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	formattedCodeBeforeUpdateHooks = []FormattedCodeHook{}

	AddFormattedCodeHook(boil.AfterUpdateHook, formattedCodeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	formattedCodeAfterUpdateHooks = []FormattedCodeHook{}

	AddFormattedCodeHook(boil.BeforeDeleteHook, formattedCodeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	formattedCodeBeforeDeleteHooks = []FormattedCodeHook{}

	AddFormattedCodeHook(boil.AfterDeleteHook, formattedCodeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	formattedCodeAfterDeleteHooks = []FormattedCodeHook{}

	AddFormattedCodeHook(boil.BeforeUpsertHook, formattedCodeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	formattedCodeBeforeUpsertHooks = []FormattedCodeHook{}

	AddFormattedCodeHook(boil.AfterUpsertHook, formattedCodeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	formattedCodeAfterUpsertHooks = []FormattedCodeHook{}
}

func testFormattedCodesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FormattedCode{}
	if err = randomize.Struct(seed, o, formattedCodeDBTypes, true, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FormattedCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFormattedCodesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FormattedCode{}
	if err = randomize.Struct(seed, o, formattedCodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(formattedCodeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FormattedCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFormattedCodesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FormattedCode{}
	if err = randomize.Struct(seed, o, formattedCodeDBTypes, true, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFormattedCodesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FormattedCode{}
	if err = randomize.Struct(seed, o, formattedCodeDBTypes, true, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FormattedCodeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFormattedCodesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FormattedCode{}
	if err = randomize.Struct(seed, o, formattedCodeDBTypes, true, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FormattedCodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	formattedCodeDBTypes = map[string]string{`Key`: `varchar`, `Code`: `mediumtext`}
	_                    = bytes.MinRead
)

func testFormattedCodesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(formattedCodePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(formattedCodeAllColumns) == len(formattedCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FormattedCode{}
	if err = randomize.Struct(seed, o, formattedCodeDBTypes, true, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FormattedCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, formattedCodeDBTypes, true, formattedCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFormattedCodesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(formattedCodeAllColumns) == len(formattedCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FormattedCode{}
	if err = randomize.Struct(seed, o, formattedCodeDBTypes, true, formattedCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FormattedCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, formattedCodeDBTypes, true, formattedCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(formattedCodeAllColumns, formattedCodePrimaryKeyColumns) {
		fields = formattedCodeAllColumns
	} else {
		fields = strmangle.SetComplement(
			formattedCodeAllColumns,
			formattedCodePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FormattedCodeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFormattedCodesUpsert(t *testing.T) {
	t.Parallel()

	if len(formattedCodeAllColumns) == len(formattedCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLFormattedCodeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FormattedCode{}
	if err = randomize.Struct(seed, &o, formattedCodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FormattedCode: %s", err)
	}

	count, err := FormattedCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, formattedCodeDBTypes, false, formattedCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FormattedCode struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FormattedCode: %s", err)
	}

	count, err = FormattedCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
