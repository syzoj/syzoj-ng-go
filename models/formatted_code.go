// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// FormattedCode is an object representing the database table.
type FormattedCode struct {
	Key  string      `boil:"key" json:"key" toml:"key" yaml:"key"`
	Code null.String `boil:"code" json:"code,omitempty" toml:"code" yaml:"code,omitempty"`

	R *formattedCodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L formattedCodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FormattedCodeColumns = struct {
	Key  string
	Code string
}{
	Key:  "key",
	Code: "code",
}

// Generated where

var FormattedCodeWhere = struct {
	Key  whereHelperstring
	Code whereHelpernull_String
}{
	Key:  whereHelperstring{field: "`formatted_code`.`key`"},
	Code: whereHelpernull_String{field: "`formatted_code`.`code`"},
}

// FormattedCodeRels is where relationship names are stored.
var FormattedCodeRels = struct {
}{}

// formattedCodeR is where relationships are stored.
type formattedCodeR struct {
}

// NewStruct creates a new relationship struct
func (*formattedCodeR) NewStruct() *formattedCodeR {
	return &formattedCodeR{}
}

// formattedCodeL is where Load methods for each relationship are stored.
type formattedCodeL struct{}

var (
	formattedCodeAllColumns            = []string{"key", "code"}
	formattedCodeColumnsWithoutDefault = []string{"key", "code"}
	formattedCodeColumnsWithDefault    = []string{}
	formattedCodePrimaryKeyColumns     = []string{"key"}
)

type (
	// FormattedCodeSlice is an alias for a slice of pointers to FormattedCode.
	// This should generally be used opposed to []FormattedCode.
	FormattedCodeSlice []*FormattedCode
	// FormattedCodeHook is the signature for custom FormattedCode hook methods
	FormattedCodeHook func(context.Context, boil.ContextExecutor, *FormattedCode) error

	formattedCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	formattedCodeType                 = reflect.TypeOf(&FormattedCode{})
	formattedCodeMapping              = queries.MakeStructMapping(formattedCodeType)
	formattedCodePrimaryKeyMapping, _ = queries.BindMapping(formattedCodeType, formattedCodeMapping, formattedCodePrimaryKeyColumns)
	formattedCodeInsertCacheMut       sync.RWMutex
	formattedCodeInsertCache          = make(map[string]insertCache)
	formattedCodeUpdateCacheMut       sync.RWMutex
	formattedCodeUpdateCache          = make(map[string]updateCache)
	formattedCodeUpsertCacheMut       sync.RWMutex
	formattedCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var formattedCodeBeforeInsertHooks []FormattedCodeHook
var formattedCodeBeforeUpdateHooks []FormattedCodeHook
var formattedCodeBeforeDeleteHooks []FormattedCodeHook
var formattedCodeBeforeUpsertHooks []FormattedCodeHook

var formattedCodeAfterInsertHooks []FormattedCodeHook
var formattedCodeAfterSelectHooks []FormattedCodeHook
var formattedCodeAfterUpdateHooks []FormattedCodeHook
var formattedCodeAfterDeleteHooks []FormattedCodeHook
var formattedCodeAfterUpsertHooks []FormattedCodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FormattedCode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formattedCodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FormattedCode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formattedCodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FormattedCode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formattedCodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FormattedCode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formattedCodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FormattedCode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formattedCodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FormattedCode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formattedCodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FormattedCode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formattedCodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FormattedCode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formattedCodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FormattedCode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formattedCodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFormattedCodeHook registers your hook function for all future operations.
func AddFormattedCodeHook(hookPoint boil.HookPoint, formattedCodeHook FormattedCodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		formattedCodeBeforeInsertHooks = append(formattedCodeBeforeInsertHooks, formattedCodeHook)
	case boil.BeforeUpdateHook:
		formattedCodeBeforeUpdateHooks = append(formattedCodeBeforeUpdateHooks, formattedCodeHook)
	case boil.BeforeDeleteHook:
		formattedCodeBeforeDeleteHooks = append(formattedCodeBeforeDeleteHooks, formattedCodeHook)
	case boil.BeforeUpsertHook:
		formattedCodeBeforeUpsertHooks = append(formattedCodeBeforeUpsertHooks, formattedCodeHook)
	case boil.AfterInsertHook:
		formattedCodeAfterInsertHooks = append(formattedCodeAfterInsertHooks, formattedCodeHook)
	case boil.AfterSelectHook:
		formattedCodeAfterSelectHooks = append(formattedCodeAfterSelectHooks, formattedCodeHook)
	case boil.AfterUpdateHook:
		formattedCodeAfterUpdateHooks = append(formattedCodeAfterUpdateHooks, formattedCodeHook)
	case boil.AfterDeleteHook:
		formattedCodeAfterDeleteHooks = append(formattedCodeAfterDeleteHooks, formattedCodeHook)
	case boil.AfterUpsertHook:
		formattedCodeAfterUpsertHooks = append(formattedCodeAfterUpsertHooks, formattedCodeHook)
	}
}

// One returns a single formattedCode record from the query.
func (q formattedCodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FormattedCode, error) {
	o := &FormattedCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for formatted_code")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FormattedCode records from the query.
func (q formattedCodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (FormattedCodeSlice, error) {
	var o []*FormattedCode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FormattedCode slice")
	}

	if len(formattedCodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FormattedCode records in the query.
func (q formattedCodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count formatted_code rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q formattedCodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if formatted_code exists")
	}

	return count > 0, nil
}

// FormattedCodes retrieves all the records using an executor.
func FormattedCodes(mods ...qm.QueryMod) formattedCodeQuery {
	mods = append(mods, qm.From("`formatted_code`"))
	return formattedCodeQuery{NewQuery(mods...)}
}

// FindFormattedCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFormattedCode(ctx context.Context, exec boil.ContextExecutor, key string, selectCols ...string) (*FormattedCode, error) {
	formattedCodeObj := &FormattedCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `formatted_code` where `key`=?", sel,
	)

	q := queries.Raw(query, key)

	err := q.Bind(ctx, exec, formattedCodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from formatted_code")
	}

	return formattedCodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FormattedCode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no formatted_code provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(formattedCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	formattedCodeInsertCacheMut.RLock()
	cache, cached := formattedCodeInsertCache[key]
	formattedCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			formattedCodeAllColumns,
			formattedCodeColumnsWithDefault,
			formattedCodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(formattedCodeType, formattedCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(formattedCodeType, formattedCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `formatted_code` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `formatted_code` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `formatted_code` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, formattedCodePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into formatted_code")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Key,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for formatted_code")
	}

CacheNoHooks:
	if !cached {
		formattedCodeInsertCacheMut.Lock()
		formattedCodeInsertCache[key] = cache
		formattedCodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FormattedCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FormattedCode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	formattedCodeUpdateCacheMut.RLock()
	cache, cached := formattedCodeUpdateCache[key]
	formattedCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			formattedCodeAllColumns,
			formattedCodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update formatted_code, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `formatted_code` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, formattedCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(formattedCodeType, formattedCodeMapping, append(wl, formattedCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update formatted_code row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for formatted_code")
	}

	if !cached {
		formattedCodeUpdateCacheMut.Lock()
		formattedCodeUpdateCache[key] = cache
		formattedCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q formattedCodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for formatted_code")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for formatted_code")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FormattedCodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), formattedCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `formatted_code` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, formattedCodePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in formattedCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all formattedCode")
	}
	return rowsAff, nil
}

var mySQLFormattedCodeUniqueColumns = []string{
	"key",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FormattedCode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no formatted_code provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(formattedCodeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFormattedCodeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	formattedCodeUpsertCacheMut.RLock()
	cache, cached := formattedCodeUpsertCache[key]
	formattedCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			formattedCodeAllColumns,
			formattedCodeColumnsWithDefault,
			formattedCodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			formattedCodeAllColumns,
			formattedCodePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert formatted_code, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "formatted_code", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `formatted_code` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(formattedCodeType, formattedCodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(formattedCodeType, formattedCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for formatted_code")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(formattedCodeType, formattedCodeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for formatted_code")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for formatted_code")
	}

CacheNoHooks:
	if !cached {
		formattedCodeUpsertCacheMut.Lock()
		formattedCodeUpsertCache[key] = cache
		formattedCodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FormattedCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FormattedCode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FormattedCode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), formattedCodePrimaryKeyMapping)
	sql := "DELETE FROM `formatted_code` WHERE `key`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from formatted_code")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for formatted_code")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q formattedCodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no formattedCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from formatted_code")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for formatted_code")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FormattedCodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(formattedCodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), formattedCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `formatted_code` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, formattedCodePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from formattedCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for formatted_code")
	}

	if len(formattedCodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FormattedCode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFormattedCode(ctx, exec, o.Key)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FormattedCodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FormattedCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), formattedCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `formatted_code`.* FROM `formatted_code` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, formattedCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FormattedCodeSlice")
	}

	*o = slice

	return nil
}

// FormattedCodeExists checks if the FormattedCode row exists.
func FormattedCodeExists(ctx context.Context, exec boil.ContextExecutor, key string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `formatted_code` where `key`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, key)
	}

	row := exec.QueryRowContext(ctx, sql, key)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if formatted_code exists")
	}

	return exists, nil
}
