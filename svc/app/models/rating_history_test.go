// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRatingHistories(t *testing.T) {
	t.Parallel()

	query := RatingHistories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRatingHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingHistory{}
	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, true, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RatingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRatingHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingHistory{}
	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, true, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RatingHistories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RatingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRatingHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingHistory{}
	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, true, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RatingHistorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RatingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRatingHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingHistory{}
	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, true, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RatingHistoryExists(ctx, tx, o.RatingCalculationID, o.UserID)
	if err != nil {
		t.Errorf("Unable to check if RatingHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RatingHistoryExists to return true, but got false.")
	}
}

func testRatingHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingHistory{}
	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, true, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ratingHistoryFound, err := FindRatingHistory(ctx, tx, o.RatingCalculationID, o.UserID)
	if err != nil {
		t.Error(err)
	}

	if ratingHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRatingHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingHistory{}
	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, true, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RatingHistories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRatingHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingHistory{}
	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, true, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RatingHistories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRatingHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ratingHistoryOne := &RatingHistory{}
	ratingHistoryTwo := &RatingHistory{}
	if err = randomize.Struct(seed, ratingHistoryOne, ratingHistoryDBTypes, false, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, ratingHistoryTwo, ratingHistoryDBTypes, false, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ratingHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ratingHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RatingHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRatingHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ratingHistoryOne := &RatingHistory{}
	ratingHistoryTwo := &RatingHistory{}
	if err = randomize.Struct(seed, ratingHistoryOne, ratingHistoryDBTypes, false, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, ratingHistoryTwo, ratingHistoryDBTypes, false, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ratingHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ratingHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RatingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ratingHistoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RatingHistory) error {
	*o = RatingHistory{}
	return nil
}

func ratingHistoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RatingHistory) error {
	*o = RatingHistory{}
	return nil
}

func ratingHistoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RatingHistory) error {
	*o = RatingHistory{}
	return nil
}

func ratingHistoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RatingHistory) error {
	*o = RatingHistory{}
	return nil
}

func ratingHistoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RatingHistory) error {
	*o = RatingHistory{}
	return nil
}

func ratingHistoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RatingHistory) error {
	*o = RatingHistory{}
	return nil
}

func ratingHistoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RatingHistory) error {
	*o = RatingHistory{}
	return nil
}

func ratingHistoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RatingHistory) error {
	*o = RatingHistory{}
	return nil
}

func ratingHistoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RatingHistory) error {
	*o = RatingHistory{}
	return nil
}

func testRatingHistoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RatingHistory{}
	o := &RatingHistory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RatingHistory object: %s", err)
	}

	AddRatingHistoryHook(boil.BeforeInsertHook, ratingHistoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ratingHistoryBeforeInsertHooks = []RatingHistoryHook{}

	AddRatingHistoryHook(boil.AfterInsertHook, ratingHistoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ratingHistoryAfterInsertHooks = []RatingHistoryHook{}

	AddRatingHistoryHook(boil.AfterSelectHook, ratingHistoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ratingHistoryAfterSelectHooks = []RatingHistoryHook{}

	AddRatingHistoryHook(boil.BeforeUpdateHook, ratingHistoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ratingHistoryBeforeUpdateHooks = []RatingHistoryHook{}

	AddRatingHistoryHook(boil.AfterUpdateHook, ratingHistoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ratingHistoryAfterUpdateHooks = []RatingHistoryHook{}

	AddRatingHistoryHook(boil.BeforeDeleteHook, ratingHistoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ratingHistoryBeforeDeleteHooks = []RatingHistoryHook{}

	AddRatingHistoryHook(boil.AfterDeleteHook, ratingHistoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ratingHistoryAfterDeleteHooks = []RatingHistoryHook{}

	AddRatingHistoryHook(boil.BeforeUpsertHook, ratingHistoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ratingHistoryBeforeUpsertHooks = []RatingHistoryHook{}

	AddRatingHistoryHook(boil.AfterUpsertHook, ratingHistoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ratingHistoryAfterUpsertHooks = []RatingHistoryHook{}
}

func testRatingHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingHistory{}
	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, true, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RatingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRatingHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingHistory{}
	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ratingHistoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RatingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRatingHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingHistory{}
	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, true, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRatingHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingHistory{}
	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, true, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RatingHistorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRatingHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingHistory{}
	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, true, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RatingHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ratingHistoryDBTypes = map[string]string{`RatingCalculationID`: `int`, `UserID`: `int`, `RatingAfter`: `int`, `Rank`: `int`}
	_                    = bytes.MinRead
)

func testRatingHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ratingHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ratingHistoryAllColumns) == len(ratingHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RatingHistory{}
	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, true, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RatingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, true, ratingHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRatingHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ratingHistoryAllColumns) == len(ratingHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RatingHistory{}
	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, true, ratingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RatingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ratingHistoryDBTypes, true, ratingHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ratingHistoryAllColumns, ratingHistoryPrimaryKeyColumns) {
		fields = ratingHistoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			ratingHistoryAllColumns,
			ratingHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RatingHistorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRatingHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(ratingHistoryAllColumns) == len(ratingHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRatingHistoryUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RatingHistory{}
	if err = randomize.Struct(seed, &o, ratingHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RatingHistory: %s", err)
	}

	count, err := RatingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ratingHistoryDBTypes, false, ratingHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RatingHistory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RatingHistory: %s", err)
	}

	count, err = RatingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
