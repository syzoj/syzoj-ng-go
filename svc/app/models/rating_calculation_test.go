// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRatingCalculations(t *testing.T) {
	t.Parallel()

	query := RatingCalculations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRatingCalculationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingCalculation{}
	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, true, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RatingCalculations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRatingCalculationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingCalculation{}
	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, true, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RatingCalculations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RatingCalculations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRatingCalculationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingCalculation{}
	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, true, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RatingCalculationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RatingCalculations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRatingCalculationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingCalculation{}
	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, true, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RatingCalculationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RatingCalculation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RatingCalculationExists to return true, but got false.")
	}
}

func testRatingCalculationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingCalculation{}
	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, true, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ratingCalculationFound, err := FindRatingCalculation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ratingCalculationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRatingCalculationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingCalculation{}
	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, true, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RatingCalculations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRatingCalculationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingCalculation{}
	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, true, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RatingCalculations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRatingCalculationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ratingCalculationOne := &RatingCalculation{}
	ratingCalculationTwo := &RatingCalculation{}
	if err = randomize.Struct(seed, ratingCalculationOne, ratingCalculationDBTypes, false, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}
	if err = randomize.Struct(seed, ratingCalculationTwo, ratingCalculationDBTypes, false, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ratingCalculationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ratingCalculationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RatingCalculations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRatingCalculationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ratingCalculationOne := &RatingCalculation{}
	ratingCalculationTwo := &RatingCalculation{}
	if err = randomize.Struct(seed, ratingCalculationOne, ratingCalculationDBTypes, false, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}
	if err = randomize.Struct(seed, ratingCalculationTwo, ratingCalculationDBTypes, false, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ratingCalculationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ratingCalculationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RatingCalculations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ratingCalculationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RatingCalculation) error {
	*o = RatingCalculation{}
	return nil
}

func ratingCalculationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RatingCalculation) error {
	*o = RatingCalculation{}
	return nil
}

func ratingCalculationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RatingCalculation) error {
	*o = RatingCalculation{}
	return nil
}

func ratingCalculationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RatingCalculation) error {
	*o = RatingCalculation{}
	return nil
}

func ratingCalculationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RatingCalculation) error {
	*o = RatingCalculation{}
	return nil
}

func ratingCalculationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RatingCalculation) error {
	*o = RatingCalculation{}
	return nil
}

func ratingCalculationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RatingCalculation) error {
	*o = RatingCalculation{}
	return nil
}

func ratingCalculationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RatingCalculation) error {
	*o = RatingCalculation{}
	return nil
}

func ratingCalculationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RatingCalculation) error {
	*o = RatingCalculation{}
	return nil
}

func testRatingCalculationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RatingCalculation{}
	o := &RatingCalculation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RatingCalculation object: %s", err)
	}

	AddRatingCalculationHook(boil.BeforeInsertHook, ratingCalculationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ratingCalculationBeforeInsertHooks = []RatingCalculationHook{}

	AddRatingCalculationHook(boil.AfterInsertHook, ratingCalculationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ratingCalculationAfterInsertHooks = []RatingCalculationHook{}

	AddRatingCalculationHook(boil.AfterSelectHook, ratingCalculationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ratingCalculationAfterSelectHooks = []RatingCalculationHook{}

	AddRatingCalculationHook(boil.BeforeUpdateHook, ratingCalculationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ratingCalculationBeforeUpdateHooks = []RatingCalculationHook{}

	AddRatingCalculationHook(boil.AfterUpdateHook, ratingCalculationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ratingCalculationAfterUpdateHooks = []RatingCalculationHook{}

	AddRatingCalculationHook(boil.BeforeDeleteHook, ratingCalculationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ratingCalculationBeforeDeleteHooks = []RatingCalculationHook{}

	AddRatingCalculationHook(boil.AfterDeleteHook, ratingCalculationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ratingCalculationAfterDeleteHooks = []RatingCalculationHook{}

	AddRatingCalculationHook(boil.BeforeUpsertHook, ratingCalculationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ratingCalculationBeforeUpsertHooks = []RatingCalculationHook{}

	AddRatingCalculationHook(boil.AfterUpsertHook, ratingCalculationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ratingCalculationAfterUpsertHooks = []RatingCalculationHook{}
}

func testRatingCalculationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingCalculation{}
	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, true, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RatingCalculations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRatingCalculationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingCalculation{}
	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ratingCalculationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RatingCalculations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRatingCalculationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingCalculation{}
	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, true, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRatingCalculationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingCalculation{}
	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, true, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RatingCalculationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRatingCalculationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RatingCalculation{}
	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, true, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RatingCalculations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ratingCalculationDBTypes = map[string]string{`ID`: `int`, `ContestID`: `int`}
	_                        = bytes.MinRead
)

func testRatingCalculationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ratingCalculationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ratingCalculationAllColumns) == len(ratingCalculationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RatingCalculation{}
	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, true, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RatingCalculations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, true, ratingCalculationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRatingCalculationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ratingCalculationAllColumns) == len(ratingCalculationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RatingCalculation{}
	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, true, ratingCalculationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RatingCalculations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ratingCalculationDBTypes, true, ratingCalculationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ratingCalculationAllColumns, ratingCalculationPrimaryKeyColumns) {
		fields = ratingCalculationAllColumns
	} else {
		fields = strmangle.SetComplement(
			ratingCalculationAllColumns,
			ratingCalculationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RatingCalculationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRatingCalculationsUpsert(t *testing.T) {
	t.Parallel()

	if len(ratingCalculationAllColumns) == len(ratingCalculationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRatingCalculationUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RatingCalculation{}
	if err = randomize.Struct(seed, &o, ratingCalculationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RatingCalculation: %s", err)
	}

	count, err := RatingCalculations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ratingCalculationDBTypes, false, ratingCalculationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RatingCalculation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RatingCalculation: %s", err)
	}

	count, err = RatingCalculations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
