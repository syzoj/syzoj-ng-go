// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RatingHistory is an object representing the database table.
type RatingHistory struct {
	RatingCalculationID int      `boil:"rating_calculation_id" json:"rating_calculation_id" toml:"rating_calculation_id" yaml:"rating_calculation_id"`
	UserID              int      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	RatingAfter         null.Int `boil:"rating_after" json:"rating_after,omitempty" toml:"rating_after" yaml:"rating_after,omitempty"`
	Rank                null.Int `boil:"rank" json:"rank,omitempty" toml:"rank" yaml:"rank,omitempty"`

	R *ratingHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ratingHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RatingHistoryColumns = struct {
	RatingCalculationID string
	UserID              string
	RatingAfter         string
	Rank                string
}{
	RatingCalculationID: "rating_calculation_id",
	UserID:              "user_id",
	RatingAfter:         "rating_after",
	Rank:                "rank",
}

// Generated where

var RatingHistoryWhere = struct {
	RatingCalculationID whereHelperint
	UserID              whereHelperint
	RatingAfter         whereHelpernull_Int
	Rank                whereHelpernull_Int
}{
	RatingCalculationID: whereHelperint{field: "`rating_history`.`rating_calculation_id`"},
	UserID:              whereHelperint{field: "`rating_history`.`user_id`"},
	RatingAfter:         whereHelpernull_Int{field: "`rating_history`.`rating_after`"},
	Rank:                whereHelpernull_Int{field: "`rating_history`.`rank`"},
}

// RatingHistoryRels is where relationship names are stored.
var RatingHistoryRels = struct {
}{}

// ratingHistoryR is where relationships are stored.
type ratingHistoryR struct {
}

// NewStruct creates a new relationship struct
func (*ratingHistoryR) NewStruct() *ratingHistoryR {
	return &ratingHistoryR{}
}

// ratingHistoryL is where Load methods for each relationship are stored.
type ratingHistoryL struct{}

var (
	ratingHistoryAllColumns            = []string{"rating_calculation_id", "user_id", "rating_after", "rank"}
	ratingHistoryColumnsWithoutDefault = []string{"rating_calculation_id", "user_id", "rating_after", "rank"}
	ratingHistoryColumnsWithDefault    = []string{}
	ratingHistoryPrimaryKeyColumns     = []string{"rating_calculation_id", "user_id"}
)

type (
	// RatingHistorySlice is an alias for a slice of pointers to RatingHistory.
	// This should generally be used opposed to []RatingHistory.
	RatingHistorySlice []*RatingHistory
	// RatingHistoryHook is the signature for custom RatingHistory hook methods
	RatingHistoryHook func(context.Context, boil.ContextExecutor, *RatingHistory) error

	ratingHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ratingHistoryType                 = reflect.TypeOf(&RatingHistory{})
	ratingHistoryMapping              = queries.MakeStructMapping(ratingHistoryType)
	ratingHistoryPrimaryKeyMapping, _ = queries.BindMapping(ratingHistoryType, ratingHistoryMapping, ratingHistoryPrimaryKeyColumns)
	ratingHistoryInsertCacheMut       sync.RWMutex
	ratingHistoryInsertCache          = make(map[string]insertCache)
	ratingHistoryUpdateCacheMut       sync.RWMutex
	ratingHistoryUpdateCache          = make(map[string]updateCache)
	ratingHistoryUpsertCacheMut       sync.RWMutex
	ratingHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ratingHistoryBeforeInsertHooks []RatingHistoryHook
var ratingHistoryBeforeUpdateHooks []RatingHistoryHook
var ratingHistoryBeforeDeleteHooks []RatingHistoryHook
var ratingHistoryBeforeUpsertHooks []RatingHistoryHook

var ratingHistoryAfterInsertHooks []RatingHistoryHook
var ratingHistoryAfterSelectHooks []RatingHistoryHook
var ratingHistoryAfterUpdateHooks []RatingHistoryHook
var ratingHistoryAfterDeleteHooks []RatingHistoryHook
var ratingHistoryAfterUpsertHooks []RatingHistoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RatingHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RatingHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RatingHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RatingHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RatingHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RatingHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RatingHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RatingHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RatingHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRatingHistoryHook registers your hook function for all future operations.
func AddRatingHistoryHook(hookPoint boil.HookPoint, ratingHistoryHook RatingHistoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		ratingHistoryBeforeInsertHooks = append(ratingHistoryBeforeInsertHooks, ratingHistoryHook)
	case boil.BeforeUpdateHook:
		ratingHistoryBeforeUpdateHooks = append(ratingHistoryBeforeUpdateHooks, ratingHistoryHook)
	case boil.BeforeDeleteHook:
		ratingHistoryBeforeDeleteHooks = append(ratingHistoryBeforeDeleteHooks, ratingHistoryHook)
	case boil.BeforeUpsertHook:
		ratingHistoryBeforeUpsertHooks = append(ratingHistoryBeforeUpsertHooks, ratingHistoryHook)
	case boil.AfterInsertHook:
		ratingHistoryAfterInsertHooks = append(ratingHistoryAfterInsertHooks, ratingHistoryHook)
	case boil.AfterSelectHook:
		ratingHistoryAfterSelectHooks = append(ratingHistoryAfterSelectHooks, ratingHistoryHook)
	case boil.AfterUpdateHook:
		ratingHistoryAfterUpdateHooks = append(ratingHistoryAfterUpdateHooks, ratingHistoryHook)
	case boil.AfterDeleteHook:
		ratingHistoryAfterDeleteHooks = append(ratingHistoryAfterDeleteHooks, ratingHistoryHook)
	case boil.AfterUpsertHook:
		ratingHistoryAfterUpsertHooks = append(ratingHistoryAfterUpsertHooks, ratingHistoryHook)
	}
}

// One returns a single ratingHistory record from the query.
func (q ratingHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RatingHistory, error) {
	o := &RatingHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for rating_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RatingHistory records from the query.
func (q ratingHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (RatingHistorySlice, error) {
	var o []*RatingHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RatingHistory slice")
	}

	if len(ratingHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RatingHistory records in the query.
func (q ratingHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count rating_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ratingHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if rating_history exists")
	}

	return count > 0, nil
}

// RatingHistories retrieves all the records using an executor.
func RatingHistories(mods ...qm.QueryMod) ratingHistoryQuery {
	mods = append(mods, qm.From("`rating_history`"))
	return ratingHistoryQuery{NewQuery(mods...)}
}

// FindRatingHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRatingHistory(ctx context.Context, exec boil.ContextExecutor, ratingCalculationID int, userID int, selectCols ...string) (*RatingHistory, error) {
	ratingHistoryObj := &RatingHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `rating_history` where `rating_calculation_id`=? AND `user_id`=?", sel,
	)

	q := queries.Raw(query, ratingCalculationID, userID)

	err := q.Bind(ctx, exec, ratingHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from rating_history")
	}

	return ratingHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RatingHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rating_history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ratingHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ratingHistoryInsertCacheMut.RLock()
	cache, cached := ratingHistoryInsertCache[key]
	ratingHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ratingHistoryAllColumns,
			ratingHistoryColumnsWithDefault,
			ratingHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ratingHistoryType, ratingHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ratingHistoryType, ratingHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `rating_history` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `rating_history` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `rating_history` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, ratingHistoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into rating_history")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RatingCalculationID,
		o.UserID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for rating_history")
	}

CacheNoHooks:
	if !cached {
		ratingHistoryInsertCacheMut.Lock()
		ratingHistoryInsertCache[key] = cache
		ratingHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RatingHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RatingHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ratingHistoryUpdateCacheMut.RLock()
	cache, cached := ratingHistoryUpdateCache[key]
	ratingHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ratingHistoryAllColumns,
			ratingHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update rating_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `rating_history` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, ratingHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ratingHistoryType, ratingHistoryMapping, append(wl, ratingHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update rating_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for rating_history")
	}

	if !cached {
		ratingHistoryUpdateCacheMut.Lock()
		ratingHistoryUpdateCache[key] = cache
		ratingHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ratingHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for rating_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for rating_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RatingHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ratingHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `rating_history` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ratingHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ratingHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ratingHistory")
	}
	return rowsAff, nil
}

var mySQLRatingHistoryUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RatingHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rating_history provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ratingHistoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRatingHistoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ratingHistoryUpsertCacheMut.RLock()
	cache, cached := ratingHistoryUpsertCache[key]
	ratingHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ratingHistoryAllColumns,
			ratingHistoryColumnsWithDefault,
			ratingHistoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			ratingHistoryAllColumns,
			ratingHistoryPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert rating_history, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "rating_history", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `rating_history` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(ratingHistoryType, ratingHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ratingHistoryType, ratingHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for rating_history")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(ratingHistoryType, ratingHistoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for rating_history")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for rating_history")
	}

CacheNoHooks:
	if !cached {
		ratingHistoryUpsertCacheMut.Lock()
		ratingHistoryUpsertCache[key] = cache
		ratingHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RatingHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RatingHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RatingHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ratingHistoryPrimaryKeyMapping)
	sql := "DELETE FROM `rating_history` WHERE `rating_calculation_id`=? AND `user_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from rating_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for rating_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ratingHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no ratingHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rating_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rating_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RatingHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ratingHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ratingHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `rating_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ratingHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ratingHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rating_history")
	}

	if len(ratingHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RatingHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRatingHistory(ctx, exec, o.RatingCalculationID, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RatingHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RatingHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ratingHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `rating_history`.* FROM `rating_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ratingHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RatingHistorySlice")
	}

	*o = slice

	return nil
}

// RatingHistoryExists checks if the RatingHistory row exists.
func RatingHistoryExists(ctx context.Context, exec boil.ContextExecutor, ratingCalculationID int, userID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `rating_history` where `rating_calculation_id`=? AND `user_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, ratingCalculationID, userID)
	}

	row := exec.QueryRowContext(ctx, sql, ratingCalculationID, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if rating_history exists")
	}

	return exists, nil
}
